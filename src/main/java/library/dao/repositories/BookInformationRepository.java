package library.dao.repositories;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import library.domain.Author;
import library.domain.BookInformation;

	public class BookInformationRepository {
	
		Connection connection;
		private boolean tableExists;

		PreparedStatement insert;
		PreparedStatement selectById;
		PreparedStatement lastId;
		PreparedStatement count;
		PreparedStatement selectByPage;

		public BookInformationRepository() {

			try {
				connection = DriverManager.getConnection("jdbc:hsqldb:hsql://localhost/workdb");

				insert = connection.prepareStatement(""
						+ "INSERT INTO bookInformation(title)"
						+ "VALUES(?)");

				selectById = connection.prepareStatement(""
						+ "SELECT * FROM bookInformation WHERE id=?");

				lastId = connection.prepareStatement(""
						+"SELECT MAX(id) FROM bookInformation"
						+"");

				count = connection.prepareStatement(""
						+"SELECT COUNT(*) FROM bookInformation"
						+"");

				selectByPage = connection.prepareStatement(""
						+"SELECT * FROM bookInformation OFFSET ? LIMIT ?"
						+"");

				ResultSet rs = connection.getMetaData().getTables(null, null, null, null);

				while(rs.next()){
					if(rs.getString("TABLE_NAME").equalsIgnoreCase("bookInformation")){
						tableExists = true;
						break;
					}
				}
			} catch (SQLException e) {
				e.printStackTrace();
			}

		}

		public BookInformation get(int id){
			BookInformation bookInformation = null;

			try {
				selectById.setInt(1, id);
				ResultSet rs = selectById.executeQuery();
				while(rs.next()){
					bookInformation=new BookInformation();
					bookInformation.setTitle(rs.getString("title"));
				}
			} catch (SQLException e) {
				e.printStackTrace();
			}

			return bookInformation;

		}

		public int count(){

			try {
				ResultSet rs = count.executeQuery();
				while(rs.next())
					return rs.getInt(1);

			} catch (SQLException e) {
				e.printStackTrace();
			}
			return 0;
		}
		public int lastId(){

			try{
				ResultSet rs = lastId.executeQuery();
				while(rs.next()) {
					return rs.getInt(1);
				}

			} catch (SQLException e) {
				e.printStackTrace();
			}
			return 0;
		}

		public List<BookInformation> getPage(int offset, int limit){

			List<BookInformation> result = new ArrayList<BookInformation>();
			try {
				selectByPage.setInt(1, offset);
				selectByPage.setInt(2, limit);
				ResultSet rs = selectByPage.executeQuery();
				while(rs.next()){
					BookInformation bI = new BookInformation();
					bI.setId(rs.getInt("id"));
					bI.setTitle(rs.getString("title"));
					result.add(bI);
				}
			} catch (SQLException e) {
				e.printStackTrace();
			}
			return result;
		}

		public void add(BookInformation bookInformation){

			try {
				insert.setString(1, bookInformation.getTitle());
				insert.executeUpdate();

			} catch (SQLException e) {
				e.printStackTrace();
			}

		}

		public void createTable(){

			String createTableSql = "CREATE TABLE bookInformation("
					+ "id bigint GENERATED BY DEFAULT AS IDENTITY,"
					+ "title VARCHAR(20)"
					+ ")";

			try {
				Statement createTable = connection.createStatement();
				if(!tableExists)
					createTable.executeUpdate(createTableSql);

			} catch (SQLException e) {
				e.printStackTrace();
			}
		}


	}
