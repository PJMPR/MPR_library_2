package library.dao.repositories.impl;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import library.dao.mappers.IMapper;
import library.dao.repositories.IBookRepository;
import library.dao.uow.IUnitOfWork;
import library.domain.Book;
import library.domain.User;

public class BookRepository extends RepositoryBase<Book> implements IBookRepository  {
	
	
	
	private PreparedStatement selectByLanguage;
	private PreparedStatement selectByTitle;
	private PreparedStatement selectByAvailability;
	private PreparedStatement selectAll;
protected BookRepository(Connection connection, IMapper<Book> mapper,
			IUnitOfWork uow) throws SQLException {
		super(connection, mapper, uow);
		selectByLanguage = connection.prepareStatement("SELECT * FROM book WHERE language=?");
		selectByTitle = connection.prepareStatement("SELECT * FROM book WHERE title=?");
		selectByAvailability = connection.prepareStatement("SELECT * FROM book WHERE isAvailable=?");
		selectAll = connection.prepareStatement("SELECT * FROM " + getTableName());
		
	}

	
	public Book get(int id){
		Book book = new Book();
				
		try {
			selectById.setInt(1, id);
			ResultSet rs = selectById.executeQuery();
			book = _mapper.map(rs);
		} catch (SQLException e) {
			e.printStackTrace();
		}		
				
		return book;
	}
	

@Override
protected String createTableSql() {
	return "CREATE TABLE book("
			+ "id bigint GENERATED BY DEFAULT AS IDENTITY,"
			+ "title VARCHAR(100),"
			+ "publisherId INT,"
			+ "releaseDate VARCHAR(20),"
			+ "additionDate VARCHAR(20),"
			+ "language VARCHAR(20),"
			+ "section VARCHAR(20),"
			+ "isAvailable VARCHAR(1),"
			+ "authorId INT,"
			+ "PRIMARY KEY(id)"
			+ ")";
}

@Override
protected String getTableName() {
	return "book";
}

@Override
protected String getInsertSql() {
	return "INSERT INTO book (title, publisherId, releaseDate, language, section, isAvailable, authorId)"
			+ "VALUES (?,?,?,?,?,?,?)";
}

@Override
protected String getUpdateSql() {
	return "UPDATE book Set (title, publisherId, releaseDate, language, section, isAvailable, authorId)"
			+ "= (?,?,?,?,?,?,?) WHERE id=?";
}

@Override
protected void setInsert(Book book) throws SQLException {
	insert.setString(1, book.getTitle());
	insert.setInt(2, book.getPublisher().getId());
	insert.setDate(3, book.getReleaseDate());
	insert.setString(4, book.getLanguage());
	insert.setString(5, "section");
	insert.setString(6, (book.isAvailable() ? "Y" : "N"));
	insert.setInt(7, book.getAuthor().getId());
	
}

@Override
protected void setUpdate(Book book) throws SQLException {
	update.setString(1, book.getTitle());
	update.setInt(2, book.getPublisher().getId());
	update.setDate(3, book.getReleaseDate());
	update.setString(4, book.getLanguage());
	update.setString(5, "section");
	update.setString(6, (book.isAvailable() ? "Y" : "N"));
	update.setInt(7, book.getAuthor().getId());
	update.setInt(8, book.getId());
}


public List<Book> withLanguage(String language) {
	List<Book> Books = new ArrayList<Book>();
	try {
		selectByLanguage.setString(1, language);
		ResultSet rs = selectByLanguage.executeQuery();
		while(rs.next()){
			Books.add(_mapper.map(rs));
		}
		
	} catch (SQLException e) {
		e.printStackTrace();
	
	}
	return Books;
}


public List<Book> withTitle(String title) {
	List<Book> Books = new ArrayList<Book>();
	try {
		selectByTitle.setString(1, title);
		ResultSet rs = selectByTitle.executeQuery();
		while(rs.next()){
			Books.add(_mapper.map(rs));
		}
		
	} catch (SQLException e) {
		e.printStackTrace();
	
	}
	return Books;
}


public List<Book> withAdditionDate(Date additionDate) {
	// TODO Auto-generated method stub
	return null;
}


public List<Book> withReleaseDate(Date releaseDate) {
	// TODO Auto-generated method stub
	return null;
}


public List<Book> withAvailability(Boolean isAvaialble) {
	List<Book> Books = new ArrayList<Book>();
	try {
		selectByAvailability.setBoolean(1, isAvaialble);
		ResultSet rs = selectByAvailability.executeQuery();
		while(rs.next()){
			Books.add(_mapper.map(rs));
		}
		
	} catch (SQLException e) {
		e.printStackTrace();
	
	}
	return Books;
}
	public List<Book> selectAll(){
		List<Book> books = new ArrayList<Book>();
		try {
			ResultSet rs = selectAll.executeQuery();
			while(rs.next())
				books.add(_mapper.map(rs));
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return books;
	}

}
