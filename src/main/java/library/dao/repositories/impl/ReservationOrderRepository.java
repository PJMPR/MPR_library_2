package library.dao.repositories.impl;

import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import library.dao.mappers.IMapper;
import library.dao.repositories.IReservationOrderRepository;
import library.dao.uow.IUnitOfWork;
import library.domain.ReservationOrder;

public class ReservationOrderRepository extends RepositoryBase<ReservationOrder>
implements IReservationOrderRepository {

	Connection connection;	
	
	private PreparedStatement selectByDate;
	
	public ReservationOrderRepository(Connection connection, IMapper<ReservationOrder> mapper, IUnitOfWork uow) throws SQLException{
		super(connection, mapper, uow);
		selectByDate = connection.prepareStatement("SELECT * FROM reservationOrder WHERE date=?");
	}
	
	@Override
	protected String createTableSql(){
		return "CREATE TABLE reservationorder("
				+ "id bigint GENERATED BY DEFAULT AS IDENTITY,"
				+ "userId INT,"
				+ "bookId INT,"
				+ "date DATETIME)";
	}
	
	@Override
	protected String getTableName() {
		return "reservationorder";
	}

	@Override
	protected String getUpdateSql() {
		return "UPDATE reservationorder SET (userId, date, bookId)=(?,?,?) WHERE id=?";
	}

	@Override
	protected String getInsertSql() {
		return "INSERT INTO reservationorder(userid, date, bookId) VALUES(?,?,?)";
	}
	
	@Override
	protected void setInsert(ReservationOrder reservationOrder) throws SQLException {
		insert.setInt(1, reservationOrder.getUser().getId());
	    insert.setDate(2, reservationOrder.getDate());
	    insert.setInt(3, reservationOrder.getBook().getId());
	}

	@Override
	protected void setUpdate(ReservationOrder reservationOrder) throws SQLException {
		update.setInt(1, reservationOrder.getUser().getId());
	    update.setDate(2, reservationOrder.getDate());
	    update.setInt(3, reservationOrder.getBook().getId());
		update.setInt(4, reservationOrder.getId());
	}

	public ReservationOrder withId(int id) {
		
		try {
			selectById.setInt(1, id);
			ResultSet rs = selectById.executeQuery();
			while(rs.next()) {
				return _mapper.map(rs);
			}
			
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return null;

	}

	public List<ReservationOrder> withDate(Date date) {
		List<ReservationOrder> list = new ArrayList<ReservationOrder>();
		try {
			selectByDate.setDate(1, date);
			ResultSet rs = selectById.executeQuery();
			while(rs.next()) {
				list.add(_mapper.map(rs));
			}
			
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return list;

	}
}
	

