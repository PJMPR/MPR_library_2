package library.dao.repositories.impl;

import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import library.dao.mappers.IMapper;
import library.dao.repositories.IBorrowingOrderRepository;
import library.dao.uow.IUnitOfWork;
import library.domain.Author;
import library.domain.BorrowingOrder;
import library.domain.ReservationOrder;

public class BorrowingOrderRepository extends RepositoryBase<BorrowingOrder>
implements IBorrowingOrderRepository
					{
	
	
	private PreparedStatement selectByDateFrom;
	private PreparedStatement selectByDateTo;
	public BorrowingOrderRepository(Connection connection, IMapper<BorrowingOrder> mapper, IUnitOfWork uow) throws SQLException{
		super(connection, mapper, uow);
		selectByDateFrom = connection.prepareStatement("SELECT * FROM borrowingOrder WHERE dateFrom=?");
		selectByDateTo = connection.prepareStatement("SELECT * FROM borrowingOrder WHERE dateTo=?");
	}
	

	@Override
	protected String getTableName() {
		return "borrowingorder";
	}

	@Override
	protected String getUpdateSql() {
		return "UPDATE borrowingorder SET (user, book, dateFrom, dateTo)=(?,?,?,?) WHERE id=?";
	}

	@Override
	protected String getInsertSql() {
		return "INSERT INTO borrowingorder(user, book, dateFrom, dateTo) VALUES(?,?,?,?)";
	}

	@Override
	protected String createTableSql() {
		return "CREATE TABLE borrowingorder("
				+ "id bigint GENERATED BY DEFAULT AS IDENTITY,"
				+ "datefrom DATETIME,"
				+ "dateto DATETIME"
				+ ")";
	}

	@Override
	protected void setInsert(BorrowingOrder borrowingOrder) throws SQLException {
		insert.setString(1, borrowingOrder.getUser().getLogin());
		insert.setString(2, borrowingOrder.getBook().getTitle());
		insert.setString(3, borrowingOrder.getDateFrom().toString());
		insert.setString(4, borrowingOrder.getDateTo().toString());
	}

	@Override
	protected void setUpdate(BorrowingOrder borrowingOrder) throws SQLException {
		update.setString(1, borrowingOrder.getUser().getLogin());
		update.setString(2, borrowingOrder.getBook().getTitle());
		update.setString(3, borrowingOrder.getDateFrom().toString());
		update.setString(4, borrowingOrder.getDateTo().toString());
		update.setInt(5, borrowingOrder.getId());
		
	}
	

	public BorrowingOrder withId(int id) {

		try {
			selectById.setInt(1, id);
			ResultSet rs = selectById.executeQuery();
			while(rs.next()) {
				return _mapper.map(rs);
			}
			
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return null;

	}

	public List<BorrowingOrder> withDateFrom(Date dateFrom) {
		List<BorrowingOrder> list = new ArrayList<BorrowingOrder>();
		try {
			selectByDateFrom.setDate(1, dateFrom);
			ResultSet rs = selectById.executeQuery();
			while(rs.next()) {
				list.add(_mapper.map(rs));
			}
			
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return list;

	}

	public List<BorrowingOrder> withDateTo(Date dateTo) {
		List<BorrowingOrder> list = new ArrayList<BorrowingOrder>();
		try {
			selectByDateTo.setDate(1, dateTo);
			ResultSet rs = selectById.executeQuery();
			while(rs.next()) {
				list.add(_mapper.map(rs));
			}
			
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return list;
	}
	
}
