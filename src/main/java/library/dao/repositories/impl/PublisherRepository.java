package library.dao.repositories.impl;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import library.dao.mappers.IMapper;
import library.dao.repositories.IPublisherRepository;
import library.domain.Publisher;

public class PublisherRepository extends RepositoryBase<Publisher>
	implements IPublisherRepository{
  
    Connection connection;
    private PreparedStatement selectByName;
   
    
    public PublisherRepository(Connection connection, IMapper<Publisher> mapper) throws SQLException {
		super(connection, mapper);
		
		selectByName = connection.prepareStatement("SELECT * FROM publisher WHERE name = ?");
		
	}
    
    @Override
    protected String createTableSql(){
        return "CREATE TABLE publisher("
                + "id bigint GENERATED BY DEFAULT AS IDENTITY,"
                + "name VARCHAR(20),"
                + "emailAdress VARCHAR(50),"
                + "website VARCHAR(40),"
                + "phoneNumber INT"
                + ")";
    }

    	
    	@Override
    	protected String getTableName() {
    		return "publisher";
    	}

    	@Override
    	protected String getUpdateSql() {
    		return "UPDATE publisher SET (name, phoneNumber, emailAdress, website)=(?,?,?,?) WHERE id=?";
    	}

    	@Override
    	protected String getInsertSql() {
    		return "INSERT INTO publisher(name,phoneNumber,emailAdress,website) VALUES(?,?,?,?)";
    	}
    	
    	@Override
    	protected void setInsert(Publisher publisher) throws SQLException {
    		insert.setString(1, publisher.getName());
    	    insert.setInt(2, publisher.getPhoneNumber());
    	    insert.setString(3, publisher.getEmailAdress());
    	    insert.setString(4, publisher.getWebsite());
    	}

    	@Override
    	protected void setUpdate(Publisher publisher) throws SQLException {
    		update.setString(1, publisher.getName());
    		update.setInt(2, publisher.getPhoneNumber());
    		update.setString(3, publisher.getEmailAdress());
    		update.setString(4, publisher.getWebsite());
    		update.setInt(5, publisher.getId());
    	}

		public List<Publisher> withName(String name) {

			List<Publisher> result = new ArrayList<Publisher>();
			try {
				selectByName.setString(1, name);
				ResultSet rs = selectByName.executeQuery();
				while(rs.next()){
					result.add(_mapper.map(rs));
				}
			} catch (SQLException e) {
				e.printStackTrace();
			}
			return result;
		}

}