package library.dao.repositories.impl;

import java.sql.Connection;
import java.sql.SQLException;

import library.dao.mappers.IMapper;
import library.domain.Publisher;

public class PublisherRepository extends RepositoryBase<Publisher>{
  
    Connection connection;
    
    public PublisherRepository(Connection connection, IMapper<Publisher> mapper) {
		super(connection, mapper);
	}
    
    @Override
    protected String createTableSql(){
        return "CREATE TABLE publisher("
                + "id bigint GENERATED BY DEFAULT AS IDENTITY,"
                + "name VARCHAR(20),"
                + "emailAdress VARCHAR(50),"
                + "website VARCHAR(40),"
                + "phoneNumber INT"
                + ")";
    }

    	
    	@Override
    	protected String getTableName() {
    		return "publisher";
    	}

    	@Override
    	protected String getUpdateSql() {
    		return "UPDATE publisher SET (name, phoneNumber, emailAdress, website)=(?,?,?,?) WHERE id=?";
    	}

    	@Override
    	protected String getInsertSql() {
    		return "INSERT INTO publisher(name,phoneNumber,emailAdress,website) VALUES(?,?,?,?)";
    	}
    	
    	@Override
    	protected void setInsert(Publisher publisher) throws SQLException {
    		insert.setString(1, publisher.getName());
    	    insert.setInt(2, publisher.getPhoneNumber());
    	    insert.setString(3, publisher.getEmailAdress());
    	    insert.setString(4, publisher.getWebsite());
    	}

    	@Override
    	protected void setUpdate(Publisher publisher) throws SQLException {
    		update.setString(1, publisher.getName());
    		update.setInt(2, publisher.getPhoneNumber());
    		update.setString(3, publisher.getEmailAdress());
    		update.setString(4, publisher.getWebsite());
    		update.setInt(5, publisher.getId());
    	}

}