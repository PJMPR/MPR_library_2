package library.dao.repositories;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import library.domain.Adress;

public class AdressRepository extends RepositoryBase<Adress>{

	public AdressRepository(Connection connection){
		super(connection);
	}
	
	@Override
	protected String createTableSql() {
		return "CREATE TABLE adress("
				+ "id bigint GENERATED BY DEFAULT AS IDENTITY,"
				+ "city VARCHAR(20),"
				+ "postalcode Varchar(7),"
				+ "street VARCHAR(32),"
				+ "apnumber VARCHAR(8)"
				+ ")";
	}

	@Override
	protected String getUpdateSql() {
		return "UPDATE adress SET (city, postalcode, street, apnumber)=(?,?,?,?) WHERE id=?";
	}

	@Override
	protected String getTableName() {
		return "adress";
	}

	@Override
	protected String getInsertSql() {
		return "INSERT INTO adress(city,postalcode,street,apnumber) VALUES(?,?,?,?)";
	}

	@Override
	protected void setUpdate(Adress adress) throws SQLException {
		update.setString(1, adress.getCity());
		update.setString(2, adress.getPostalCode());
		update.setString(3, adress.getStreet());
		update.setString(4, adress.getApNumber());
		update.setInt(5, adress.getId());
	}

	protected void setInsert(Adress adress) throws SQLException {
		insert.setString(1,adress.getCity());
		insert.setString(2,adress.getPostalCode());
		insert.setString(3,adress.getStreet());
		insert.setString(4,adress.getApNumber());
	}

	public List<Adress> getPage(int offset, int limit){

		List<Adress> result = new ArrayList<Adress>();
		try {
			selectByPage.setInt(1, offset);
			selectByPage.setInt(2, limit);
			ResultSet rs = selectByPage.executeQuery();
			while(rs.next()){
				Adress adress = new Adress();
				adress = new Adress();
				adress.setId(rs.getInt("id"));
				adress.setCity(rs.getString("city"));
				adress.setPostalCode(rs.getString("postalcode"));
				adress.setStreet(rs.getString("street"));
				adress.setApNumber(rs.getString("apnumber"));
				result.add(adress);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return result;
	}

	public Adress get(int id){
		Adress adress = null;

		try {
			selectById.setInt(1, id);
			ResultSet rs = selectById.executeQuery();
			while(rs.next()){
				adress = new Adress();
				adress.setId(rs.getInt("id"));
				adress.setCity(rs.getString("city"));
				adress.setPostalCode(rs.getString("postalcode"));
				adress.setStreet(rs.getString("street"));
				adress.setApNumber(rs.getString("apnumber"));
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}

		return adress;
	}
}
