package library.dao.repositories;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import library.domain.Adress;
import library.domain.Author;

public class AdressRepository {
	
	Connection connection;
	private boolean tableExist;
	
	PreparedStatement insert;
	PreparedStatement selectById;
    PreparedStatement lastId;
	PreparedStatement selectByPage;
	PreparedStatement count;
	  
	
	public AdressRepository(){
		
		try{
			connection = DriverManager.getConnection("jdbc:hsqldb:hsql://localhost/workdb");
			
			insert = connection.prepareStatement(""
					+ "INSERT INTO adress(city,postalcode,street,apnumber)"
					+ "VALUES(?,?,?,?)");
			
			selectById = connection.prepareStatement(""
					+ "SELECT * FROM adress WHERE id=?");
			
			lastId = connection.prepareStatement(""
					+ "SELECT MAX(id) FROM adress"
					+ "");
			
			count = connection.prepareStatement(""
					+ "SELECT COUNT(*) FROM adress"
					+ "");
			
			selectByPage = connection.prepareStatement(""
					+ "SELECT * FROM adress OFFSET ? LIMIT ?"
					+ "");
			
			ResultSet rs = connection.getMetaData().getTables(null, null, null, null);
			
			while(rs.next()){
				if(rs.getString("TABLE_NAME").equalsIgnoreCase("adress")){
					tableExist = true;
					break;
				}
			}
			
		}catch(SQLException e){
			e.printStackTrace();
		}
	}
	
	public int count(){
		
		try {
			ResultSet rs = count.executeQuery();
			while(rs.next())
				return rs.getInt(1);
			
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return 0;
	}
	
	public List<Adress> getPage(int offset, int limit){
		
		List<Adress> result = new ArrayList<Adress>();
		try {
			selectByPage.setInt(1, offset);
			selectByPage.setInt(2, limit);
			ResultSet rs = selectByPage.executeQuery();
			while(rs.next()){
				Adress adress = new Adress();
				adress = new Adress();
				adress.setId(rs.getInt("id"));
				adress.setCity(rs.getString("city"));
				adress.setPostalCode(rs.getString("postalcode"));
				adress.setStreet(rs.getString("street"));
				adress.setApNumber(rs.getString("apnumber"));
				result.add(adress);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return result;
	}
	
	public int lastId(){
		
		try {
			ResultSet rs = lastId.executeQuery();
			while(rs.next())
				return rs.getInt(1);
			
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return 0;
	}
	
	public Adress get(int id){
		Adress adress = null;
				
		try {
			selectById.setInt(1, id);
			ResultSet rs = selectById.executeQuery();
			while(rs.next()){
				adress = new Adress();
				adress.setId(rs.getInt("id"));
				adress.setCity(rs.getString("city"));
				adress.setPostalCode(rs.getString("postalcode"));
				adress.setStreet(rs.getString("street"));
				adress.setApNumber(rs.getString("apnumber"));
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
		return adress;
}		
	
	public void add(Adress adress)
	{
		try {
			insert.setString(1,adress.getCity());
			insert.setString(2,adress.getPostalCode());
			insert.setString(3,adress.getStreet());
			insert.setString(4,adress.getApNumber());
			insert.executeUpdate();
			
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
	
	public void createtable(){
		
		String createtableSql = "CREATE TABLE adress("
				+ "id bigint GENERATED BY DEFAULT AS IDENTITY,"
				+ "city VARCHAR(20),"
				+ "postalcode Varchar(7),"
				+ "street VARCHAR(32),"
				+ "apnumber VARCHAR(8)"
				+ ")";
		
		try{
			Statement createTable = connection.createStatement();
			if(!tableExist)
				createTable.executeUpdate(createtableSql);
			
		}catch(SQLException e){
			e.printStackTrace();
		}
	}
}
